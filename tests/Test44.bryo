
fn Main_f32_
{
    Print("=== Testing Foundation Library ===")
    Print("")
    
    -- Test Memory
    Print("--- Memory Tests ---")
    var mem = (i32*)Malloc(20)
    mem[0] = 42
    mem[1] = 84
    Print("Allocated memory, set values")
    PrintInt(mem[0])
    PrintInt(mem[1])
    Free((void*)mem)
    Print("Freed memory")
    Print("")
    
    -- Test String
    Print("--- String Tests ---")
    var str1 = "Hello"
    var str2 = " World"
    var buffer = (char*)Malloc(50)
    
    StrCopy(buffer, str1)
    Print(buffer)
    
    StrCat(buffer, str2)
    Print(buffer)
    
    Print("Length:")
    PrintInt(StrLen(buffer))
    
    Print("Find 'World':")
    PrintInt(StrFind(buffer, "World"))
    
    var numStr = "-42"
    Print("Parsed int:")
    PrintInt(StrToInt(numStr))
    
    Free((void*)buffer)
    Print("")
    
    -- Test Math
    Print("--- Math Tests ---")
    Print("Abs(-42):")
    PrintInt(Abs(-42))
    
    Print("Max(10, 20):")
    PrintInt(Max(10, 20))
    
    Print("Sqrt(16):")
    PrintFloat(Sqrt(16.0))
    
    Print("Pow(2, 8):")
    PrintFloat(Pow(2.0, 8.0))
    
    Print("Sin(0):")
    PrintFloat(Sin(0.0))
    
    Print("Cos(0):")
    PrintFloat(Cos(0.0))
    
    Print("Lerp(0, 10, 0.5):")
    PrintFloat(Lerp(0.0, 10.0, 0.5))

    Print("=== Testing Advanced Library ===")
    Print("")
    
    -- Test StringBuilder
    Print("--- StringBuilder Test ---")
    var sb = new StringBuilder(16)
    sb.Append("Hello")
    sb.AppendChar((char)32)  -- space
    sb.Append("World!")
    sb.Append(" Number: ")
    sb.AppendInt(42)
    sb.Append(" Float: ")
    sb.AppendFloat(3.14)
    Print(sb.ToString())
    sb.Destroy()
    Print("")
    
    -- Test Dynamic Arrays
    Print("--- Dynamic Array Test ---")
    var nums = (i32*)ArrayCreate(4, 4)  -- element size 4, capacity 4
    
    nums = ArrayPushInt(nums, 5)
    nums = ArrayPushInt(nums, 2)
    nums = ArrayPushInt(nums, 8)
    nums = ArrayPushInt(nums, 1)
    nums = ArrayPushInt(nums, 9)  -- Should trigger resize
    
    Print("Array length:")
    PrintInt(ArrayLength(nums))
    Print("Array capacity:")
    PrintInt(ArrayCapacity(nums))
    
    Print("Array contents:")
    var i = 0
    var len = ArrayLength(nums)
    while i < len
    {
        PrintInt(nums[i])
        i += 1
    }
    Print("")
    
    -- Test Sorting
    Print("--- Sorting Test ---")
    Print("Before QuickSort:")
    i = 0
    while i < len
    {
        PrintInt(nums[i])
        i += 1
    }
    
    QuickSortInt(nums, len)
    
    Print("After QuickSort:")
    i = 0
    while i < len
    {
        PrintInt(nums[i])
        i += 1
    }
    
    -- Test Binary Search
    Print("Binary search for 8:")
    PrintInt(BinarySearchInt(nums, len, 8))
    
    ArrayDestroy(nums)
    Print("")
    
    -- Test Random
    Print("--- Random Test ---")
    var rng = new Random((u32)12345)
    Print("Random numbers:")
    i = 0
    while i < 5
    {
        PrintInt(rng.Range(1, 100))
        i += 1
    }
    
    Print("Random floats:")
    i = 0
    while i < 5
    {
        PrintFloat(rng.RangeFloat(0.0, 1.0))
        i += 1
    }
    Print("")
    
    -- Test Bit Manipulation
    Print("--- Bit Manipulation Test ---")
    Print("CountBits(15):")
    PrintInt(CountBits(15))
    
    Print("IsPowerOfTwo(16):")
    if IsPowerOfTwo(16)
        Print("true")
    else
        Print("false")
    
    Print("NextPowerOfTwo(100):")
    PrintInt(NextPowerOfTwo(100))

    return 0.0
}