type GameCharacter {
    var health = 100;
    var mana = 50;
    var level = 1;
    var experience = 0;
    var alive = true;
    
    fn isAlive(): bool {
        return alive && health > 0;
    }
    
    fn getHealthPercent(): i32 {
        if (health <= 0) {
            return 0;
        }
        return health;
    }
    
    fn takeDamage(i32 damage): bool {
        if (isAlive()) {
            health = health - damage;
            if (health <= 0) {
                alive = false;
                return true;  // character died
            }
            return false;  // still alive
        }
        return false;  // already dead
    }
    
    fn heal(i32 amount): i32 {
        if (isAlive()) {
            health = health + amount;
            if (health > 100) {
                health = 100;  // cap at 100
            }
        }
        return getHealthPercent();
    }
    
    fn gainExperience(i32 exp): bool {
        if (isAlive()) {
            experience = experience + exp;
            
            // Check for level up (every 100 exp)
            for (var i = 0; i < 10; i = i + 1) {
                if (experience >= level * 100) {
                    level = level + 1;
                    mana = mana + 10;  // gain mana per level
                    experience = experience - (level - 1) * 100;
                } else {
                    return true;  // leveled up
                }
            }
        }
        return false;  // no level up or dead
    }
    
    fn castSpell(i32 manaCost): bool {
        if (isAlive() && mana >= manaCost) {
            mana = mana - manaCost;
            return true;
        }
        return false;
    }
    
    fn simulateCombat(i32 rounds): i32 {
        var totalDamage = 0;
        var victories = 0;
        
        for (var round = 0; round < rounds; round = round + 1) {
            if (isAlive()) {
                // Cast healing spell if low health
                if (getHealthPercent() < 30 && mana >= 10) {
                    if (castSpell(10)) {
                        heal(25);
                    }
                }
                
                // Take damage from enemy
                var enemyDamage = 15 + round;  // damage increases per round
                var died = takeDamage(enemyDamage);
                totalDamage = totalDamage + enemyDamage;
                
                if (died) {
                    return totalDamage;  // died, return damage taken
                }
                
                // Counter attack and gain experience
                if (castSpell(5)) {
                    var expGained = 10 + round;
                    gainExperience(expGained);
                    victories = victories + 1;
                }
            } else {
                return totalDamage;  // dead, exit combat
            }
        }
        
        return victories * 100 + totalDamage;  // survived all rounds
    }
}

type Inventory {
    var gold = 100;
    var itemCount = 0;
    var maxItems = 10;
    
    fn canAfford(i32 cost): bool {
        return gold >= cost;
    }
    
    fn hasSpace(): bool {
        return itemCount < maxItems;
    }
    
    fn buyItem(i32 cost): bool {
        if (canAfford(cost) && hasSpace()) {
            gold = gold - cost;
            itemCount = itemCount + 1;
            return true;
        }
        return false;
    }
    
    fn sellItem(i32 value): bool {
        if (itemCount > 0) {
            gold = gold + value;
            itemCount = itemCount - 1;
            return true;
        }
        return false;
    }
    
    fn optimizeInventory(): i32 {
        var transactions = 0;
        
        // Try to buy items if we have gold and space
        for (var i = 0; i < 5; i = i + 1) {
            var itemCost = 20 + i * 5;  // increasing cost
            if (buyItem(itemCost)) {
                transactions = transactions + 1;
            }
        }
        
        // Sell expensive items if inventory is full
        if (itemCount >= maxItems) {
            for (var j = 0; j < 3; j = j + 1) {
                var sellValue = 30 + j * 10;
                if (sellItem(sellValue)) {
                    transactions = transactions + 1;
                }
            }
        }
        
        return transactions;
    }
}

fn main(): i32 {
    var character = new GameCharacter();
    var inventory = new Inventory();
    
    var totalScore = 0;
    
    // Initial character stats
    var initialHealth = character.getHealthPercent();
    totalScore = totalScore + initialHealth;
    
    // Test combat simulation
    var combatResult = character.simulateCombat(5);
    totalScore = totalScore + combatResult;
    
    // Test healing if character survived
    if (character.isAlive()) {
        var healResult = character.heal(50);
        totalScore = totalScore + healResult;
        
        // Test experience gain
        var leveledUp = character.gainExperience(250);
        if (leveledUp) {
            totalScore = totalScore + 100;  // bonus for leveling up
        }
    }
    
    // Test inventory management
    var transactions = inventory.optimizeInventory();
    totalScore = totalScore + transactions * 10;
    
    // Test buying healing potions
    for (var potions = 0; potions < 3; potions = potions + 1) {
        if (inventory.canAfford(15)) {
            if (inventory.buyItem(15)) {
                if (character.isAlive()) {
                    character.heal(20);
                    totalScore = totalScore + 5;
                }
            }
        }
    }
    
    // Final character state bonus
    if (character.isAlive()) {
        var finalHealth = character.getHealthPercent();
        totalScore = totalScore + finalHealth;
    }
    
    return totalScore;
}