// Ecosystem Simulation - Predator-Prey Dynamics

type Animal {
    f32 x, y;           // position
    f32 energy, age;    // vital stats
    f32 speed, size;    // physical attributes
    
    // Property: movement cost based on size and speed
    var movementCost => size * speed * 0.1;
    
    // Property: whether animal is healthy
    var isHealthy => energy > 50.0 && age < 100.0;
}

type Rabbit {
    Animal base;
    f32 reproductionRate;
    
    // Property: breeding readiness
    var canBreed => base.energy > 80.0 && base.age > 10.0;
    
    // Property: survival instinct (flee faster when low energy)
    var flightSpeed => base.speed;
}

type Wolf {
    Animal base;
    f32 huntSuccess, packBonus;
    
    // Property: hunting effectiveness
    var huntPower => huntSuccess * packBonus * base.size;
    
    // Property: is alpha (large and experienced)
    var isAlpha => base.size > 15.0 && base.age > 50.0;
}

type Ecosystem {
    f32 temperature, rainfall;
    f32 season, dayLength;
    
    // Property: carrying capacity based on environment
    var capacity => temperature * rainfall * 0.5;
    
    // Property: harsh conditions check
    var isHarsh => temperature < 5.0 || rainfall < 20.0;
}

// Create a rabbit at position with energy
fn CreateRabbit(f32 posX, f32 posY, f32 startEnergy): Rabbit {
    var rabbit = new Rabbit();
    rabbit.base = new Animal();
    rabbit.base.x = posX;
    rabbit.base.y = posY;
    rabbit.base.energy = startEnergy;
    rabbit.base.age = 0.0;
    rabbit.base.speed = 8.0;
    rabbit.base.size = 2.0;
    rabbit.reproductionRate = 0.8;
    return rabbit;
}

// Create a wolf at position with energy  
fn CreateWolf(f32 posX, f32 posY, f32 startEnergy): Wolf {
    var wolf = new Wolf();
    wolf.base = new Animal();
    wolf.base.x = posX;
    wolf.base.y = posY;
    wolf.base.energy = startEnergy;
    wolf.base.age = 0.0;
    wolf.base.speed = 12.0;
    wolf.base.size = 10.0;
    wolf.huntSuccess = 0.6;
    wolf.packBonus = 1.2;
    return wolf;
}

// Update rabbit behavior - foraging and fleeing
fn UpdateRabbit(Rabbit rabbit, f32 deltaTime, Ecosystem env): Rabbit {
    // Age the rabbit
    rabbit.base.age = rabbit.base.age + deltaTime;
    
    // Foraging - gain energy based on environment
    if (env.capacity > 50.0) {
        rabbit.base.energy = rabbit.base.energy + 15.0 * deltaTime;
    }
    
    // Energy cost for living
    rabbit.base.energy = rabbit.base.energy - rabbit.base.movementCost * deltaTime;
    
    // Movement simulation
    rabbit.base.x = rabbit.base.x + rabbit.flightSpeed * deltaTime * 0.1;
    rabbit.base.y = rabbit.base.y + rabbit.flightSpeed * deltaTime * 0.05;
    
    return rabbit;
}

// Update wolf behavior - hunting and roaming
fn UpdateWolf(Wolf wolf, f32 deltaTime, Ecosystem env): Wolf {
    // Age the wolf
    wolf.base.age = wolf.base.age + deltaTime;
    
    // Hunting energy gain (simulated)
    if (wolf.huntPower > 8.0) {
        wolf.base.energy = wolf.base.energy + 25.0 * deltaTime;
    }
    
    // Higher energy cost for predators
    wolf.base.energy = wolf.base.energy - wolf.base.movementCost * 2.0 * deltaTime;
    
    // Territory patrol
    wolf.base.x = wolf.base.x + wolf.base.speed * deltaTime * 0.08;
    wolf.base.y = wolf.base.y + wolf.base.speed * deltaTime * 0.12;
    
    return wolf;
}

// Environmental update based on seasons
fn UpdateEnvironment(Ecosystem env, f32 totalTime): Ecosystem {
    env.season = totalTime * 0.25;
    
    // Seasonal temperature variation
    env.temperature = 20.0 + 15.0 * totalTime * 0.1;
    
    // Seasonal rainfall
    if (env.season < 25.0) {
        env.rainfall = 40.0 + totalTime * 2.0;
    }
    if (env.season >= 25.0) {
        env.rainfall = 80.0 - totalTime * 1.5;
    }
    
    env.dayLength = 12.0 + 4.0 * env.season * 0.1;
    
    return env;
}

// Population tracking with arrays
fn TrackPopulations(): f32[] {
    var populations = [100.0, 20.0, 0.0, 0.0, 0.0];  // rabbits, wolves, births, deaths, total
    
    // Simulate population changes over time
    for (f32 generation = 0.0; generation < 5.0; generation = generation + 1.0) {
        // Rabbit reproduction
        populations[0] = populations[0] * 1.15;
        
        // Wolf predation impact
        populations[0] = populations[0] - populations[1] * 2.5;
        
        // Wolf population follows prey with delay
        populations[1] = populations[1] + populations[0] * 0.02;
        
        // Track births and deaths
        populations[2] = populations[2] + populations[0] * 0.1;
        populations[3] = populations[3] + populations[1] * 0.05;
    }
    
    populations[4] = populations[0] + populations[1]; // total living
    return populations;
}

// Calculate ecosystem stability score
fn CalculateStability(f32[] pops, Ecosystem env): f32 {
    f32 stability = 0.0;
    f32 factor = 1.0;
    
    while (factor < 4.0) {
        // Diversity factor
        if (pops[0] > 50.0 && pops[1] > 10.0) {
            stability = stability + 20.0 * factor;
        }
        
        // Environmental factor
        if (env.capacity > 60.0 && !env.isHarsh) {
            stability = stability + 15.0 * factor;
        }
        
        factor = factor + 1.0;
    }
    
    return stability;
}

fn Main(): f32 {
    // Initialize ecosystem
    var ecosystem = new Ecosystem();
    ecosystem.temperature = 18.0;
    ecosystem.rainfall = 45.0;
    ecosystem.season = 0.0;
    ecosystem.dayLength = 12.0;
    
    // Create initial animals
    var testRabbit = CreateRabbit(25.0, 30.0, 75.0);
    var testWolf = CreateWolf(50.0, 40.0, 90.0);
    
    // Run ecosystem simulation
    f32 simulationTime = 0.0;
    f32 timeStep = 0.2;
    f32 totalScore = 0.0;
    
    // Main simulation loop
    while (simulationTime < 20.0 && testRabbit.base.energy > 0.0) {
        // Update environment
        ecosystem = UpdateEnvironment(ecosystem, simulationTime);
        
        // Update animals
        testRabbit = UpdateRabbit(testRabbit, timeStep, ecosystem);
        testWolf = UpdateWolf(testWolf, timeStep, ecosystem);
        
        // Score calculation based on survival and properties
        if (testRabbit.base.isHealthy) {
            totalScore = totalScore + 5.0;
        }
        
        if (testWolf.isAlpha) {
            totalScore = totalScore + 10.0;
        }
        
        if (testRabbit.canBreed) {
            totalScore = totalScore + 8.0;
        }
        
        // Environmental bonus
        if (!ecosystem.isHarsh) {
            totalScore = totalScore + 2.0;
        }
        
        simulationTime = simulationTime + timeStep;
    }
    
    // Population dynamics simulation
    var populations = TrackPopulations();
    
    // Calculate final ecosystem stability
    f32 stabilityScore = CalculateStability(populations, ecosystem);
    
    // Final bonus calculation with for loop
    f32 bonusPoints = 0.0;
    for (f32 i = 1.0; i < 6.0; i = i + 1.0) {
        bonusPoints = bonusPoints + i * 12.0;
    }
    
    return totalScore + stabilityScore + bonusPoints + populations[4];
}