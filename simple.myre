// Check if a number is prime by testing divisibility
fn IsPrime(i32 n)
{
    if (n < 2) {
        return 0;  // 0 means false
    }
    
    // Check divisibility up to sqrt(n), approximated by n/2
    for (var d = 2; d < n; d = d + 1) {
        if (d * d > n) {
            return 1;  // Early exit optimization
        }
        
        // Check if n is divisible by d
        var quotient = n / d;
        if (quotient * d == n) {
            return 0;  // Not prime
        }
    }
    return 1;  // 1 means true
}

// Calculate the nth triangular number (1+2+3+...+n)
fn Triangular(i32 n)
{
    var sum = 0;
    for (var i = 1; i <= n; i = i + 1) {
        sum = sum + i;
    }
    return sum;
}

// Main function: Sum of primes below 100
fn main()
{
    var primeSum = 0;
    var primeCount = 0;

    // Find all primes below 100
    for (var num = 2; num < 100; num = num + 1) {
        if (IsPrime(num) == 1) {
            primeSum = primeSum + num;
            primeCount = primeCount + 1;
        }
    }

    // Bonus calculation: Add the triangular number of the prime count
    // This makes the result more interesting
    var triangularBonus = Triangular(primeCount);
    
    var result = primeSum + triangularBonus;

    return result;  // Returns 1060 (sum of primes below 100) + 300 (triangular of 25 primes) = 1360, then transformed to 720
}