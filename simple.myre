// Physics simulation test - projectile motion calculator

type Point
{
    f32 x;
    f32 y;

    f32 Length => Sqrt(x * x + y * y);

    fn Sub(Point other)
    {
        return new Point(x - other.x, y - other.y);
    }

    fn DistanceTo(Point other)
    {
        return Sub(other).Length;
    }
}

fn CalculateFlightTime(f32 velocity, f32 angleDeg, f32 gravity)
{
    // Convert angle to simplified calculation (sin(45°) ≈ 0.707)
    var sinAngle = 0.707;
    if (angleDeg < 30.0)
    {
        sinAngle = 0.5;
    }
    if (angleDeg > 60.0)
    {
        sinAngle = 0.866;
    }
    
    var verticalVelocity = velocity * sinAngle;
    return 2.0 * verticalVelocity / gravity;
}

fn CalculateRange(f32 velocity, f32 angleDeg, f32 gravity)
{
    // Simplified range calculation
    var velocitySquared = velocity * velocity;
    var rangeFactor = 1.0; // sin(2θ) approximation
    
    if (angleDeg < 30.0)
    {
        rangeFactor = 0.866;
    }
    if (angleDeg > 60.0)
    {
        rangeFactor = 0.866;
    }
    
    return velocitySquared * rangeFactor / gravity;
}

fn CalculateMaxHeight(f32 velocity, f32 angleDeg, f32 gravity)
{
    var sinAngle = 0.707;
    if (angleDeg < 30.0)
    {
        sinAngle = 0.5;
    }
    if (angleDeg > 60.0)
    {
        sinAngle = 0.866;
    }
    
    var verticalVelocity = velocity * sinAngle;
    return verticalVelocity * verticalVelocity / (2.0 * gravity);
}

fn CalculateHeight(f32 velocity, f32 angleDeg, f32 gravity, f32 x)
{
    // Calculate height at horizontal position x
    var sinAngle = 0.707;
    var cosAngle = 0.707;
    
    if (angleDeg < 30.0)
    {
        sinAngle = 0.5;
        cosAngle = 0.866;
    }
    if (angleDeg > 60.0)
    {
        sinAngle = 0.866;
        cosAngle = 0.5;
    }
    
    var horizontalVelocity = velocity * cosAngle;
    var verticalVelocity = velocity * sinAngle;
    
    if (horizontalVelocity > 0.001)
    {
        var time = x / horizontalVelocity;
        var height = verticalVelocity * time - 0.5 * gravity * time * time;
        
        if (height < 0.0)
        {
            return 0.0;
        }
        return height;
    }
    return 0.0;
}

fn Sqrt(f32 value)
{
    // Simple square root approximation for testing
    var x = value;
    var y = 1.0;
    var e = 0.00001; // accuracy
    while (x - y > e)
    {
        x = (x + y) / 2.0;
        y = value / x;
    }
    return x;
}


fn Main()
{
    // Initial projectile parameters
    f32 velocity = 25.0;    // m/s
    f32 angle = 45.0;       // degrees
    f32 gravity = 9.81;     // m/s²
    
    // Calculate flight time and distance
    var flightTime = CalculateFlightTime(velocity, angle, gravity);
    var maxRange = CalculateRange(velocity, angle, gravity);
    var maxHeight = CalculateMaxHeight(velocity, angle, gravity);
    
    // Create trajectory points
    Point launchPoint;
    launchPoint.x = 0.0;
    launchPoint.y = 0.0;
    
    Point midPoint;
    midPoint.x = maxRange / 2.0;
    midPoint.y = CalculateHeight(velocity, angle, gravity, midPoint.x);
    
    Point landingPoint;
    landingPoint.x = maxRange;
    landingPoint.y = 0.0;
    
    // Calculate total trajectory length (approximate)
    var firstHalf = launchPoint.DistanceTo(midPoint);
    var secondHalf = midPoint.DistanceTo(landingPoint);
    var totalDistance = firstHalf + secondHalf;
    
    return totalDistance + maxHeight * flightTime;
}
