type GameCharacter {
    var health = 100;
    var mana = 50;
    var level = 1;
    var alive = true;
    
    fn isAlive(): bool {
        return alive && health > 0;
    }
    
    fn getHealth(): i32 {
        return health;
    }
    
    fn takeDamage(i32 damage): bool {
        if (isAlive()) {
            health = health - damage;
            if (health <= 0) {
                alive = false;
                return true;  // character died
            }
            return false;  // still alive
        }
        return false;  // already dead
    }
    
    fn heal(i32 amount): i32 {
        if (isAlive()) {
            health = health + amount;
            if (health > 100) {
                health = 100;  // cap at 100
            }
        }
        return getHealth();  // Call another member function
    }
    
    fn castSpell(i32 manaCost): bool {
        if (isAlive() && mana >= manaCost) {
            mana = mana - manaCost;
            return true;
        }
        return false;
    }
    
    fn combatRound(): i32 {
        var damage = 0;
        
        if (isAlive()) {
            // Cast healing spell if low health
            if (getHealth() < 30 && mana >= 10) {
                if (castSpell(10)) {
                    heal(25);
                }
            }
            
            // Take damage from enemy
            var enemyDamage = 20;
            var died = takeDamage(enemyDamage);
            damage = enemyDamage;
            
            if (died) {
                return damage;
            }
            
            // Counter attack
            if (castSpell(5)) {
                damage = damage + 10;  // bonus damage dealt
            }
        }
        
        return damage;
    }
}

type Item {
    var name = "test";
    i32 cost;
    i32 sellValue;
    f64 testing = 10;

    new(string n, i32 c, i32 s) {
        name = n;
        cost = c;
        sellValue = s;
    }

    fn getName(): string {
        return name;
    }

    fn getCost(): i32 {
        return cost;
    }

    fn getSellValue(): i32 {
        return sellValue;
    }
}

type Shop {
    var gold = 100;
    f64 maxItems = 5;
    Item inventory;

    fn canAfford(i32 cost): bool {
        return gold >= cost;
    }
    
    fn hasSpace(): bool {
        return inventory.size() < maxItems;
    }
    
    fn buyItem(Item item): bool {
        if (canAfford(item.getCost()) && hasSpace()) {
            gold = gold - item.getCost();
            inventory.push(item);
            return true;
        }
        return false;
    }
    
    fn sellItem(): bool {
        if (inventory.size() > 0) {
            var item = inventory.pop();
            gold = gold + item.getSellValue();
            return true;
        }
        return false;
    }
    
    fn getGold(): i32 {
        return gold;
    }
    
    fn trade(): i32 {
        var profit = 0;

        // Buy cheap items
        var potion = new Item("Potion", 20, 35);
        if (buyItem(potion)) {
            profit = profit - potion.getCost();
        }
        
        var sword = new Item("Sword", 25, 40);
        if (buyItem(sword)) {
            profit = profit - sword.getCost();
        }
        
        // Sell items for higher price
        if (sellItem()) {
            profit = profit + 35; // from potion
        }
        
        if (sellItem()) {
            profit = profit + 40; // from sword
        }
        
        return profit;
    }
}

var testVar = 100;

fn main(): i32 {
    var character = new GameCharacter();
    var shop = new Shop();
    
    var totalScore = 0;
    
    // Test initial health
    var initialHealth = character.getHealth();
    totalScore = totalScore + initialHealth;  // +100
    
    // Test combat
    var combatDamage = character.combatRound();
    totalScore = totalScore + combatDamage;
    
    // Heal
    if (character.isAlive()) {
        var healResult = character.heal(30);
        totalScore = totalScore + healResult;
    }
    
    // Shop trading
    var shopProfit = shop.trade();
    totalScore = totalScore + shopProfit;
    
    var finalGold = shop.getGold();
    totalScore = totalScore + finalGold;
    
    // More combat
    if (character.isAlive())
    {
        for (var i in 0..10 by 2 at var i)
        {
            var secondCombat = character.combatRound();
            totalScore = totalScore + secondCombat;
            
            var finalHealth = character.getHealth();
            totalScore = totalScore + finalHealth;
        }
    }
    
    return totalScore;
}
