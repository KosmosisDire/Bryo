using System.Collections;
using Tests;

namespace Test.Namespace;

// example of bracketed namespace (not valid to have two namespaces like this but it is just an example)
namespace Test.Bracketed.Namespace
{
    public fn Stuff(): i32
    {
        return 1;
    }
}

public enum Shape
{
    None,
    Square(i32 x, i32 y, i32 width, i32 height),
    Circle(i32 x, i32 y, i32 radius)
}

public enum Direction
{
    North,
    East,
    South,
    West,

    public fn Opposite(): Direction
    {
        return match (this)
        {
            .North => .South,
            .East =>
                {
                    Console.Log("West");
                    return .West;
                },
            .South => .North,
            .West => .East,
        };
    }
}

public static type Console
{
    // members of a static class are implicitly static
	public i32 messageCount;
	f64 doubleVar1 = 2.4;
	f64 doubleVar2 = 2.4;
	string lastMessage;

	public inline fn Log(string msg)
	{
		Print(msg);
		messageCount++;
		lastMessage = msg;
	}
	
    // virtual functions can be overriden
	public virtual fn GetLast(): string
	{
		return lastMessage;
	}
}

public type Vector3
{
	public f32 x, y, z;

	// An auto implemented constructor is provided if no constructor defined
}

ref type MutableConstraint<T, U>
{
    public T value;

    public fn GetValue(): T
    {
        return value;
    }
}

public ref type Observable<T> where T : ref type, Updateable, new(i32, i32)
{
    public T value;

    // This is a simple observable that can be used to notify changes
    public fn NotifyChange()
    {
        Console.Log("Value changed to: " + value.ToString());
    }

    public fn GetValue(): T
    {
        return value;
    }
}

public type Updateable
{
    // This is an interface that can be used to mark types that can be updated
    public abstract fn Update(f32 deltaTime);
}

public abstract type Health : Updateable
{
    // prop is used to declare a property with a getter and setter.
    // properties can use the field keyword to access a backing field.
    // the field keyword is optional, if not used no auto backing field is created and you must create your own field.
    // Although an auto backing field will be created is the default getter and setter are used.
    u32 health = 100
    {
        public get => field;
        protected set =>
        {
            // value is a keyword that refers to the value being set
            if (value < 0)
            {
                Console.Log("Health cannot be negative, setting to 0");
                // field is a keyword that refers to the backing field
                field = 0;
            }

            field = value;
        }
    }

    // you can also use default access modifiers for properties
    // this will inherit access from the property declaration
    // public u32 health = 100
    //     get => field;
    //     set =>
    //     {
    //         if (value < 0)
    //         {
    //             Console.Log("Health cannot be negative, setting to 0");
    //             field = 0;
    //         }
    //         field = value;
    //     }

    // you can of course also use auto implemented properties
    // public u32 health = 100 {get; set;}
    // or 
    // u32 health = 100 {get: public; set: protected;}

    
    
    // properties with only a getter can be creates with a simple arrow function
    // the getter access level matches the level of the property
    public bool isAlive => health > 0;

    // or
    // public bool isAlive =>
    // {
    //     return health > 0;
    // }
    

    public u32 maxHealth = 100;

    // this function is enforced meaning that any derived class must explicity choose whether to inherit this implementation or define their own implementation
    // This help to make sure that the user of a derived class is aware that this function exists and can choose to override it if needed.
    // This is basically just an abstract function with a default implementation.
    public enforced fn TakeDamage(u32 amount)
    {
        health -= amount;
    }

    // default implementations are not required. This means the derived class MUST implement this function.
    // these can only be used in abstract classes.
    public abstract fn Heal(u32 amount);

    // We do nothing by default, but force the derived class to implement this function
    public enforced fn Update(f32 deltaTime)
    {
    }
}

// if I extends health, I must implement the Heal function or choose to inherit the default implementation
public type HealthWithRegeneration : Health
{
    public f32 regenerationRate;

    // we must either implement a new TakeDamage function or choose to inherit the default implementation
    // here we choose to inherit the existing implementation
    // if we wanted to override it, we would use the override keyword
    // since we kept the enforced keyword, anything that derives from this class must implement the TakeDamage function the same as here.
    public inherit enforced fn TakeDamage(u32 amount);

    // here you can see we override the Heal function since it is abstract
    public override fn Heal(u32 amount)
    {
        health += amount;
    }

    // we can ommit the enforced function, to allow the derived class to silently inherit this new implementation
    public fn Update(f32 deltaTime)
    {
        health += (regenerationRate * deltaTime);
    }
}

// ref types always passed by reference 
public ref type Enemy
{
    public static var enemies = new List<Enemy>();
    public HealthWithRegeneration health;
	public Vector3 position;
	i32 attack;
	f32 hitChance = 0.5;
	
	new(Vector3 startPos, u32 damage = 5)
	{
		position = startPos;
		attack = damage;
        enemies.Add(this);
	}
  
    public enforced fn GetDamage(): u32
    {
        PrivateFunc(42, MutableConstraint<Shape, Health>(), (Direction direction) =>
        {
            return match (direction)
            {
                .North => .Square(0, 0, 10, 10),
                .East => .Circle(0, 0, 5),
                .South => .Square(5, 5, 15, 15),
                .West => .Circle(5, 5, 10),
            };
        });

        // shorthand lambda
        PrivateFunc(42, MutableConstraint<Shape, Health>(), d => .Square(0, 0, 10, 10));

	    return Random.Chance(hitChance) ? attack : 0;
    }
    
    protected virtual fn PrivateFunc(i32 param, MutableConstraint<Shape, Health> bigType, Fn<Direction, Shape> functionParam): Observable<Health>
    {
        Console.Log("This is a private function");
        return Observable<Health>(health);
    }

    public virtual fn PrintStatus()
    {
        match (health)
        {
            in ..=0 => Console.Log("Enemy is dead"),
            in 1..=10 => Console.Log("Enemy is severely injured"),
            in 11..=50 => Console.Log("Enemy is injured"),
            _ => Console.Log("Enemy is healthy"),
        };
    }

}

fn Main()
{
	var running = true;
	var newvar = "Hello there";
	var someVar = 5;
    var floatVar = 3.14;
    var enemy = new Enemy(Vector3(0, 0, 0), 10);

    // this is invalid because enemy is not mut
    // enemy = new Enemy(Vector3(1, 1, 1), 20);

    // implicit type inference
    var enemy2 = new Enemy(Vector3(1, 1, 1), 20);

    // valid because enemy2 is mut
    enemy2 = new Enemy(Vector3(2, 2, 2), 30);

    for (Enemy e in Enemy.enemies)
    {
        e.PrintStatus();
        Console.Log("Enemy damage: " + e.GetDamage().ToString());
    }

    // or type can be inferred
	for (var e in Enemy.enemies)
    {
        e.PrintStatus();
        Console.Log("Enemy damage: " + e.GetDamage().ToString());
    }

    // for i in range
    for (i32 i in 0..10)
    {
        Console.Log("Index: " + i.ToString());
    }

    // or type can be inferred
    for (var i in 0..10)
    {
        Console.Log("Index: " + i.ToString());
    }

    // step by 2, "0..10 by 2" is an expression that creates a range from 0 to 10 with a step of 2
    for (var i in 0..10 by 2)
    {
        Console.Log("Index: " + i.ToString());
    }

    // use a variable for range and with a float
    for (f32 i in 0.0..floatVar by 0.5)
    {
        Console.Log("Index: " + i.ToString());
    }

    // type can still be inferred
    for (var i in 0..floatVar by 0.5)
    {
        Console.Log("Index: " + i.ToString());
    }

    // subarray with a range
    for (var i in Enemy.enemies[0..2])
    {
        i.PrintStatus();
        Console.Log("Enemy damage: " + i.GetDamage().ToString());
    }

    // subarray with a range
    for (var i in Enemy.enemies[5..10 by 2])
    {
        i.PrintStatus();
        Console.Log("Enemy damage: " + i.GetDamage().ToString());
    }

    for (i32 i = 0; i < 10; i++)
    {
        Console.Log("Index: " + i.ToString());
    }

	while (running)
    {
        someVar++;
        if (someVar > 10)
        {
            running = false;
        }
    }
	
	Console.Log("Done");
}

Main();