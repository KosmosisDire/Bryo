
type Vector3
{
    f32 x,y,z;
}

type Quaternion
{
    f32 x,y,z,w;
}

type Transform
{
    Vector3 position;
    Quaternion rotation;
    Vector3 scale;

    fn Translate(Vector3 translation)
    {
        position.x = position.x + translation.x;
        position.y = position.y + translation.y;
        position.z = position.z + translation.z;
    }

    fn Rotate(Quaternion amount)
    {
        -- Simplified rotation logic, actual implementation would be more complex
        rotation.x = rotation.x + amount.x;
        rotation.y = rotation.y + amount.y;
        rotation.z = rotation.z + amount.z;
        rotation.w = rotation.w + amount.w;
    }

    fn Scale(float factor)
    {
        scale.x = scale.x * factor;
        scale.y = scale.y * factor;
        scale.z = scale.z * factor;
    }
}

type Player
{
    Transform transform;
    i32 health;
    f32 speed;

    fn Move(Vector3 direction)
    {
        transform.Translate(direction * speed);
    }

    fn TakeDamage(i32 amount): i32
    {
        health = health - amount;
        if (health < 0) {
            health = 0;
        }

        return health;
    }
}

fn main(): i32
{
    Player player;
    player.transform.position = new Vector3(0,0,0);
    player.transform.rotation = new Quaternion(0, 0, 0, 1);
    player.transform.scale = new Vector3(1, 1, 1);
    player.health = 100;
    player.speed = 5;

    -- Example usage
    player.Move(new Vector3(1, 0, 0)); -- Move right
    player.TakeDamage(20); -- Take damage

    return player.TakeDamage(15);
}