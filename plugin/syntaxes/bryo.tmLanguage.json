{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Bryo",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#constants" },
    { "include": "#type-declarations" },
    { "include": "#functions" },
    { "include": "#constructor-calls" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#properties" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#variables" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.documentation.bryo",
          "begin": "---+",
          "end": "---+",
          "patterns": [
            {
              "name": "comment.block.documentation.region.bryo",
              "match": "^---\\s+(.+?)\\s+---$",
              "captures": {
                "1": { "name": "entity.name.section.bryo" }
              }
            }
          ]
        },
        {
          "name": "comment.line.double-dash.bryo",
          "match": "--.*$",
          "patterns": [
            {
              "name": "keyword.other.documentation.bryo",
              "match": "\\b(TODO|FIXME|NOTE|HACK|XXX)\\b"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.bryo",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.bryo",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.backtick.bryo",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape.bryo",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.bryo",
          "match": "\\b\\d+\\.\\d+[lL]?\\b"
        },
        {
          "name": "constant.numeric.integer.bryo",
          "match": "\\b\\d+[uU]?[lL]?\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.bryo",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "variable.language.this.bryo",
          "match": "\\b(this)\\b"
        },
        {
          "name": "variable.other.field.bryo",
          "match": "\\b(field)\\b"
        },
        {
          "name": "variable.other.value.bryo",
          "match": "\\b(value)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.bryo",
          "match": "\\b(if|else|while|for|in|at|by|step|return|break|continue)\\b"
        },
        {
          "name": "keyword.other.bryo",
          "match": "\\b(var|fn|type|ref|op|implicit|explicit|cast|public|private|protected|get|set)\\b"
        },
        {
          "name": "storage.type.primitive.bryo",
          "match": "\\b(i32|i64|u32|u64|f32|f64|bool|string|int|float|double|uint|long|ulong)\\b"
        },
        {
          "name": "keyword.operator.arrow.bryo",
          "match": "=>"
        },
        {
          "name": "keyword.operator.return-type.bryo",
          "match": "->"
        }
      ]
    },
    "type-declarations": {
      "patterns": [
        {
          "name": "meta.type-declaration.bryo",
          "match": "\\b(type|ref\\s+type)\\s+([A-Z][A-Za-z0-9_]*)\\s*(<[^>]+>)?",
          "captures": {
            "1": { "name": "keyword.other.bryo" },
            "2": { "name": "entity.name.type.bryo" },
            "3": { "name": "meta.type.parameters.bryo" }
          }
        }
      ]
    },
    "constructor-calls": {
      "patterns": [
        {
          "match": "\\b(new)\\s+([A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "keyword.other.new.bryo" },
            "2": { "name": "entity.name.type.bryo" }
          },
          "comment": "new Type constructor calls"
        }
      ]
    },
    "properties": {
      "patterns": [
        {
          "name": "meta.property.declaration.bryo",
          "begin": "\\b(var)\\s+([A-Z][A-Za-z0-9_]*)\\s*(=|=>)",
          "beginCaptures": {
            "1": { "name": "keyword.other.bryo" },
            "2": { "name": "variable.other.property.bryo" },
            "3": { "name": "keyword.operator.bryo" }
          },
          "end": "(?=[;}])|(?=\\{)",
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.bryo",
          "match": "\\b([A-Z][A-Za-z0-9_]*)(\\[\\])?\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=|;|\\)|,|$)",
          "captures": {
            "1": { "name": "entity.name.type.bryo" },
            "2": { "name": "punctuation.definition.array.bryo" },
            "3": { "name": "variable.other.bryo" }
          },
          "comment": "Type when used in variable declarations like 'Animal stuff = ...'"
        },
        {
          "name": "entity.name.type.bryo",
          "match": "(?<=->)\\s*([A-Z][A-Za-z0-9_]*(?:\\[\\])?)",
          "captures": {
            "1": { "name": "entity.name.type.bryo" }
          },
          "comment": "Return type after ->"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.definition.generic.bryo",
          "begin": "\\b(fn)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*(<)",
          "beginCaptures": {
            "1": { "name": "keyword.other.bryo" },
            "2": { "name": "entity.name.function.bryo" },
            "3": { "name": "punctuation.definition.generic.begin.bryo" }
          },
          "end": "(>)",
          "endCaptures": {
            "1": { "name": "punctuation.definition.generic.end.bryo" }
          },
          "patterns": [
            { "include": "#generic-parameters" }
          ],
          "comment": "Function definition with generics"
        },
        {
          "name": "meta.function.definition.simple.bryo",
          "match": "\\b(fn)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "keyword.other.bryo" },
            "2": { "name": "entity.name.function.bryo" }
          },
          "comment": "Simple function definition - just fn and name"
        },
        {
          "name": "meta.constructor.definition.bryo",
          "match": "\\b(new)(?=\\s*\\()",
          "captures": {
            "1": { "name": "keyword.other.bryo" }
          },
          "comment": "Constructor definition"
        },
        {
          "name": "meta.operator.definition.bryo",
          "match": "\\b(op)\\s+([+\\-*/!<>=&|^%]+|[A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "keyword.other.bryo" },
            "2": { "name": "entity.name.function.bryo" }
          },
          "comment": "Operator overload definition"
        },
        {
          "name": "meta.function.call.generic.bryo",
          "begin": "\\b([A-Z][A-Za-z0-9_]*)\\s*(<)(?=[^<>=]*>\\s*\\()",
          "beginCaptures": {
            "1": { "name": "entity.name.function.bryo" },
            "2": { "name": "punctuation.definition.generic.begin.bryo" }
          },
          "end": "(>)",
          "endCaptures": {
            "1": { "name": "punctuation.definition.generic.end.bryo" }
          },
          "patterns": [
            { "include": "#generic-arguments" }
          ],
          "comment": "Generic function call like Generic<int, float>(...)"
        },
        {
          "name": "entity.name.function.bryo",
          "match": "\\b[A-Z][A-Za-z0-9_]*(?=\\s*\\()",
          "comment": "Function call with PascalCase"
        }
      ]
    },
    "generic-parameters": {
      "patterns": [
        {
          "match": "\\b([A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "entity.name.type.parameter.bryo" }
          },
          "comment": "Generic type parameter"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.bryo"
        }
      ]
    },
    "generic-arguments": {
      "patterns": [
        {
          "match": "\\b([A-Za-z_][A-Za-z0-9_\\[\\]]*)\\b",
          "captures": {
            "1": { "name": "entity.name.type.bryo" }
          },
          "comment": "Generic type argument"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.bryo"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.compound.bryo",
          "match": "(\\+=|-=|\\*=|/=|%=|\\*\\*=|&=|\\|=|\\^=|<<=|>>=)"
        },
        {
          "name": "keyword.operator.comparison.bryo",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.bryo",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.bryo",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.arithmetic.bryo",
          "match": "(\\+|-|\\*|/|%|\\*\\*)"
        },
        {
          "name": "keyword.operator.assignment.bryo",
          "match": "="
        },
        {
          "name": "keyword.operator.range.bryo",
          "match": "\\.\\.(=)?"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.definition.array.bryo",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.definition.block.bryo",
          "match": "[{}]"
        },
        {
          "name": "punctuation.definition.parameters.bryo",
          "match": "[()]"
        },
        {
          "name": "punctuation.separator.bryo",
          "match": "[,;]"
        },
        {
          "name": "punctuation.accessor.bryo",
          "match": "\\."
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.member.bryo",
          "match": "(?<=\\.)\\b[A-Za-z_][A-Za-z0-9_]*\\b",
          "comment": "Member access after dot"
        },
        {
          "name": "variable.other.bryo",
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "parameters": {
      "patterns": [
        {
          "match": "([A-Za-z_][A-Za-z0-9_]*(?:\\[\\])?)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "storage.type.bryo" },
            "2": { "name": "variable.parameter.bryo" }
          }
        }
      ]
    },
    "generics": {
      "patterns": [
        {
          "name": "meta.type.parameters.bryo",
          "begin": "<",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.generic.begin.bryo" }
          },
          "end": ">",
          "endCaptures": {
            "0": { "name": "punctuation.definition.generic.end.bryo" }
          },
          "patterns": [
            { "include": "#types" },
            { "include": "#punctuation" },
            { "include": "#generic-parameters" }
          ]
        }
      ]
    }
  },
  "scopeName": "source.bryo"
}